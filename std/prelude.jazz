open "std/hash.jazz"
open "std/option.jazz"


let apply = |f,v| f(v)
let array_map = |f,array| {
    var result = anew()
    var pc = 0
    while pc < alen(array) {
        var value = f(array[pc])
        apush(result,value)
        pc = pc + 1
    }
    result
}

let iter = |f,array| {
    var pc = 0
    while pc < alen(array) {
        f(array[pc])
        pc = pc + 1
    } 
}

let ord = |x,y| {
    if x < y {
        "Less"
    } else if x == y {
        "Equal"
    } else {
        "Greater"
    }
}

let min = |l,r| if l <= r l else r

let max = |l,r| if r >= l r else l

let qsort = |array| {
    var less = anew()
    var equal = anew()
    var greater = anew()

    if alen(array) > 1 {
        var pivot = array[1]
        iter(|x| {
            match ord(x,pivot) {
                "Less" -> {
                    apush(less,x)
                }
                "Greater" -> {
                    apush(greater,x)
                }
                "Equal" -> {
                    apush(equal,x)
                }
            }
        },array)
        qsort(less) + equal + qsort(greater)
    } else {
        array
    }
}

let string_countOccurrences = |str,ch| {
    let chars = string_to_array(str)
    var i = 0
    var counter = 0
    while i < alen(chars) {
        if chars[i] == ch {
            counter = counter + 1
        }
        i = i + 1
    }
    counter
}

/*let print_characters = |str| {
    var chars = string_to_array(str)
    var i = 0
    while i < len(chars) {
        putchar(chars[i])
        i = i + 1
    }
}
// By default `print` and `println` is a builtin functions but when you include this file these functions replaced by this two
let print = || {
    var i = 0
    var buff = anew()
    while i < alen(_args) {
        apush(buff,string(_args[i]))
        if i != alen(_args) - 1 {
            apush(buff,",")
        }
        i = i + 1
    }
    var s = string_from_array(buff)
    print_characters(s)
    
}

let println = || {
    var i = 0
    var buff = anew()
    while i < alen(_args) {
        apush(buff,string(_args[i]))
        if i != alen(_args) - 1 {
            apush(buff,",")
        }
        i = i + 1
    }
    var s = string_from_array(buff)
    print(s)
    putchar("\n")
}*/