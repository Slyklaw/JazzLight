open "std/prelude.jazz"


let OP_PUSH = 0
let OP_POP = 1
let OP_ADD = 2
let OP_SUB = 3
let OP_DIV = 4
let OP_MUL = 5
let OP_RET = 6
let OP_STORE_LOCAL = 7
let OP_LOAD_LOCAL = 8
let OP_JUMP = 9
let OP_CJUMP = 10

__vm_proto__ = new(nil)
__vm_proto__.stack = anew(0)
__vm_proto__.locals = anew(100)
__vm_proto__.pop = || {
    apop(self.stack)
}
__vm_proto__.run = |opcodes| {
    var i = 0
    while i < alen(opcodes) {
        match opcodes[i] {
            OP_PUSH -> {
                i = i + 1
                var value = opcodes[i]
                apush(self.stack,value)
            }
            OP_ADD -> {
                
                var v1 = self.pop()
                var v2 = self.pop()
                apush(self.stack,v1 + v2)
            }
            OP_SUB -> {
                var v1 = self.pop()
                var v2 = self.pop()
                apush(self.stack,v1 - v2)
            }
            OP_MUL -> {
                var v1 = self.pop()
                var v2 = self.pop()
                apush(self.stack,v1 * v2)
            }
            OP_DIV -> {
                var v1 = self.pop()
                var v2 = self.pop()
                apush(self.stack,v1 / v2)
            }
            OP_JUMP -> {
                i = i + 1
                var to = opcodes[i]
                if typename(to) != "int" {
                    error("Expected integer")
                }
                i = to
            }
            OP_CJUMP -> {
                i = i + 1
                var to = opcodes[i]
                if typename(to) != "int" {
                    error("Expected integer")
                }
                if self.pop() {
                    i = to
                }
            }
            OP_LOAD_LOCAL -> {
                var i = i + 1
                var idx = opcodes[i]
                
                var value = self.locals[idx]

                apush(self.stack,value)
            }
            OP_STORE_LOCAL -> {
                var i = i + 1
                var idx = opcodes[i]
                var value = self.pop()

                self.locals[idx] = value
            }
            
            _ -> error("Unimplemented")
        }
        i = i + 1
    }
    var ret = (if alen(self.stack) == 0 "nothing" else self.pop()) 
    ret
}
var new_vm = || {
    var obj = new(__vm_proto__)
    obj
}

var vm = new_vm()

var opcodes = anew()
apush(opcodes,OP_PUSH)
apush(opcodes,5)
apush(opcodes,OP_STORE_LOCAL)
apush(opcodes,1)
apush(opcodes,OP_LOAD_LOCAL)
apush(opcodes,1)

println(vm.run(opcodes))