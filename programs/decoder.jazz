var Reader = $loadmodule("Reader")
var Array = $loadmodule("Array")

var opcode = function(lexeme,args)  {
    var o = $new(null)
    o.lexeme = lexeme
    o.args = args

    return o
}

var display_op = function(op)  {
    $print(op.lexeme," ")
    Array.iter(
        function(x)  {
            $print(x)
        },
        op.args
    )

}


var r = Reader.new($args()[2])

var nglobals = Reader.read_int(r)
var nfields = Reader.read_int(r)
var codesize = Reader.read_int(r)

$print(
    "global count: ",nglobals,"\n",
    "fields count: ",nfields,"\n",
    "code size: ",codesize, "\n"
)

var functions = $array()

var pc = 0
while pc < nglobals {
    var b = Reader.read_byte(r)
    switch b {
        1 -> {
            var off = Reader.read_int(r)
            var nargs = Reader.read_short(r)
            $apush(functions,$array(off,nargs))
        }
        _ -> {

        }
    }
    pc = pc + 1
}

var fields = $array()

var pci = 0
while pci < nfields {
    
    var key = Reader.read_long(r)
    
    var buf = $array()
    while true {
        var b = Reader.read_byte(r)
        if b == 0 {
            break
        } 
        $apush(buf,b)
    }
    var s = $string_from_bytes(buf)
    $apush(fields,$array(key,s))
    pci = pci + 1
}   

var code = $array()

var i = 0 
while i < codesize {
    var op = Reader.read_byte(r)
    switch op {
        0 -> {
            var sign = Reader.read_byte(r)
            var i = if sign == 1 {
                -Reader.read_long(r)
            } else {
                Reader.read_long(r)
            }
            $apush(code,opcode("LdInt",$array(i)))
        
        }
        1 -> {
            var f = Reader.read_long(r)
            $apush(code,opcode("LdFloat",$array($float_from_bits(f))))
        }
        2 -> {
            var buf = $array()
            var len = Reader.read_int(r)
            var j = 0
            
            while j < len {
                $apush(buf,Reader.read_byte(r))
                j = j + 1
            }
            var s = $string_from_bytes(buf)
            
            $apush(code,opcode("LdStr",$array(s)))
            
        }
        3 -> {
            var b2 = Reader.read_byte(r)
            switch b2 {
                0 -> $apush(code,opcode("LdFalse",$array()))
                1 -> $apush(code,opcode("LdTrue", $array()))
                2 -> $apush(code,opcode("LdNull",$array()))
                3 -> $apush(code,opcode("LdThis",$array()))
                4 -> {
                    var h = Reader.read_long(r)
                    $apush(code,opcode("LdField",$array(h)))
                }
                5 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("LdLocal",$array(id)))
                }
                6 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("LdGlobal",$array(id))) 
                }
                7 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("LdEnv",$array(id))) 
                }
                8 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("LdBuiltin",$array(id))) 
                }
                9 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("LdIndex",$array(id)))
                }
                10 -> {
                    $apush(code,opcode("LdArray",$array()))
                }
                _ -> {}
            }
        }
        4 -> {
            var b2 = Reader.read_byte(r)
            switch b2 {
                0 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("SetLocal",$array(id)))
                }
                1 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("SetGlobal",$array(id)))
                }
                2 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("SetEnv",$array(id)))
                }
                3 -> {
                    var id = Reader.read_long(r)
                    $apush(code,opcode("SetField",$array(id)))
                }
                4 -> {
                    $apush(code,opcode("SetArray",$array()))
                }
                5 -> {
                    var id = Reader.read_int(r)
                    $apush(code,opcode("SetIndex",$array(id)))
                }
                6 -> {
                    $apush(code,opcode("SetThis",$array()))
                }
                _ -> {}
            }
        }
        5 -> {
            var count = Reader.read_short(r)
            $apush(code,opcode("Pop",$array(count)))
        }
        6 -> {
            var count = Reader.read_short(r)
            $apush(code,opcode("Apply",$array(count)))
        }
        7 -> {
            var count = Reader.read_short(r)
            $apush(code,opcode("Call",$array(count)))
        }
        8 -> {
            var count = Reader.read_short(r)
            $apush(code,opcode("TailCall",$array(count)))
        }
        9 -> {
            var count = Reader.read_short(r)
            $apush(code,opcode("ObjCall",$array(count)))
        }
        10 -> {
            var b2 = Reader.read_byte(r)
            var dest = Reader.read_int(r)
            switch b2  {
                0 -> {
                    $apush(code,opcode("Jump",$array(dest)))
                }
                1 -> {
                    $apush(code,opcode("JumpIf",$array(dest)))
                }
                2 -> {
                    $apush(code,opcode("JumpIfNot",$array(dest)))
                }
                _ -> {}
            }
        }
        11 -> {
            $apush(code,opcode("Ret",$array()))
        }
        12 -> {
            var c = Reader.read_int(r)
            $apush(code,opcode("MakeEnv",$array(c)))
        }
        13 -> {
            var c = Reader.read_int(r)
            $apush(code,opcode("MakeArray",$array(c)))
        }
        14 -> {
            $apush(code,opcode("Neg",$array()))
        }
        15 -> {
            $apush(code,opcode("Bool",$array()))
        }
        16 -> $apush(code,opcode("Not",$array()))
        17 -> $apush(code,opcode("IsNull",$array()))
        18 -> $apush(code,opcode("IsNotNull",$array()))
        19 -> {
            var b2 = Reader.read_byte(r)
            switch b2 {
                0 -> $apush(code,opcode("Add",$array()))
                1 -> $apush(code,opcode("Sub",$array()))
                2 -> $apush(code,opcode("Mul",$array()))
                3 -> $apush(code,opcode("Div",$array()))
                4 -> $apush(code,opcode("Rem",$array()))
                5 -> $apush(code,opcode("Shl",$array()))
                6 -> $apush(code,opcode("Shr",$array()))
                7 -> $apush(code,opcode("UShr",$array()))
                8 -> $apush(code,opcode("Or",$array()))
                9 -> $apush(code,opcode("And",$array()))
                10 -> $apush(code,opcode("Xor",$array()))
                11 -> $apush(code,opcode("Eq",$array()))
                12 -> $apush(code,opcode("Neq",$array()))
                13 -> $apush(code,opcode("Lt",$array()))
                14 -> $apush(code,opcode("Lte",$array()))
                15 -> $apush(code,opcode("Gt",$array()))
                16 -> $apush(code,opcode("Gte",$array()))
                _ -> {}
            }
        }
        20 -> $apush(code,opcode("Nop",$array()))
        21 -> $apush(code,opcode("TypeOf",$array()))
        22 -> $apush(code,opcode("Hash",$array()))
        23 -> $apush(code,opcode("New",$array()))
        24 -> $apush(code,opcode("Yield",$array()))
        25 -> $apush(code,opcode("Last",$array()))
        _ -> {}
    }
    i = i + 1
}

$print("globals: \r\n")
Array.iter(
    function(x)  {
        $print("\tfunction at ",x[0],", nargs ", x[1])
        $print("\r\n")
    },
    functions
)

$print("fields: \r\n")
Array.iter(
    function(x)  {
        $print("\t")
        $print(x[1], " => ", $sprintf("0x%x",x[0]),"\r\n")
    },
    fields
)

$print("\r\ncode:\r\n")
Array.iteri(
    function(i,x)  {
        $print(i,": ")
        display_op(x)
        $print("\r\n")
    },
    code
)

return 0
